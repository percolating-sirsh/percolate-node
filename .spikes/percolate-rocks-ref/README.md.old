# percolate-rocks

**Fast REM database with Rust backend and Python bindings**

A high-performance embedded database for building AI applications with automatic embedding generation, JSON Schema validation, and multi-tenant support.

[![PyPI](https://img.shields.io/pypi/v/percolate-rocks.svg)](https://pypi.org/project/percolate-rocks/)
[![Python](https://img.shields.io/pypi/pyversions/percolate-rocks.svg)](https://pypi.org/project/percolate-rocks/)

## Features

- 🚀 **Rust-powered** - RocksDB storage backend for high performance
- 🤖 **Multiple embedding providers** - OpenAI, local models, or bring your own
- 📊 **JSON Schema validation** - Ensure data integrity with schemas
- 🔍 **Vector search** - Semantic similarity search with embeddings
- 🔒 **Multi-tenant** - Isolated data per tenant
- 🐍 **Python-friendly** - Clean async/await API with type stubs
- 📦 **Zero dependencies** - Pure Python package, no extras needed

## Quick Start

### Installation

```bash
pip install percolate-rocks
```

That's it! No dependencies, no model downloads (unless you want embeddings).

### Basic Usage (No Embeddings)

```python
from percolate_rocks import REMDatabase
import tempfile

# Create database
db = REMDatabase(
    tenant_id="my-app",
    path="./my-database",
    enable_embeddings=False  # Fast start, no downloads
)

# Register a schema
db.register_schema(
    "users",
    {
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "email": {"type": "string"},
            "age": {"type": "integer"}
        },
        "required": ["name", "email"]
    }
)

# Insert data
user_id = db.insert("users", {
    "name": "Alice",
    "email": "alice@example.com",
    "age": 30
})

# Query data
user = db.get(user_id)
print(f"User: {user['properties']['name']}")

# List all users
all_users = db.scan_by_type("users")
print(f"Total users: {len(all_users)}")
```

### With OpenAI Embeddings (Recommended)

```python
import asyncio
import os
from percolate_rocks import REMDatabase

async def main():
    # Configure OpenAI embeddings
    os.environ["P8_DEFAULT_EMBEDDING"] = "text-embedding-3-small"
    os.environ["OPENAI_API_KEY"] = "sk-..."

    # Create database with embeddings enabled
    db = REMDatabase(
        tenant_id="my-app",
        path="./my-database",
        enable_embeddings=True  # Uses OpenAI automatically
    )

    # Register schema with embedding fields
    db.register_schema(
        "documents",
        {
            "type": "object",
            "properties": {
                "title": {"type": "string"},
                "content": {"type": "string"}
            },
            "required": ["title", "content"]
        },
        embedding_fields=["content"]  # Automatically embed this field
    )

    # Insert with automatic embedding generation
    doc_id = await db.insert_with_embedding(
        "documents",
        {
            "title": "Getting Started",
            "content": "This is a guide to using percolate-rocks..."
        }
    )

    print(f"✓ Document inserted with embeddings: {doc_id}")

asyncio.run(main())
```

### With Local Embeddings (Privacy-First)

```python
import asyncio
from percolate_rocks import REMDatabase

async def main():
    # Don't set P8_DEFAULT_EMBEDDING → uses local model
    # Downloads all-MiniLM-L6-v2 (~100MB) to ~/.p8/models/ on first use

    db = REMDatabase(
        tenant_id="my-app",
        path="./my-database",
        enable_embeddings=True
    )

    db.register_schema(
        "notes",
        {
            "type": "object",
            "properties": {
                "text": {"type": "string"}
            }
        },
        embedding_fields=["text"]
    )

    # Local embedding generation (384 dimensions)
    note_id = await db.insert_with_embedding(
        "notes",
        {"text": "Remember to buy groceries"}
    )

    print(f"✓ Note embedded locally: {note_id}")

asyncio.run(main())
```

## Embedding Providers

### Option 1: OpenAI (Recommended for Production)

**Pros:**
- No model downloads
- High quality embeddings (1536 or 3072 dims)
- Fast inference
- Latest models

**Setup:**
```bash
export P8_DEFAULT_EMBEDDING="text-embedding-3-small"
export OPENAI_API_KEY="sk-..."
```

**Models:**
- `text-embedding-3-small` - 1536 dims, $0.00002/1K tokens
- `text-embedding-3-large` - 3072 dims, $0.00013/1K tokens
- `text-embedding-ada-002` - 1536 dims (legacy)

### Option 2: Local Model (Privacy & Offline)

**Pros:**
- Works offline
- No API costs
- Data never leaves your machine
- Good for development

**Setup:**
```bash
# No environment variables needed
# Model downloads automatically to ~/.p8/models/
```

**Model:**
- `sentence-transformers/all-MiniLM-L6-v2` - 384 dims, ~100MB

### Option 3: No Embeddings (Fastest)

**Pros:**
- Instant start
- No dependencies
- Use external embedding services
- Full database functionality

**Setup:**
```python
db = REMDatabase("tenant", "./db", enable_embeddings=False)
```

## Configuration

### Environment Variables

| Variable | Description | Example |
|----------|-------------|---------|
| `P8_DEFAULT_EMBEDDING` | Embedding model to use | `text-embedding-3-small` |
| `OPENAI_API_KEY` | OpenAI API key | `sk-proj-...` |
| `HF_HOME` | Local model cache directory | `~/.p8/models` |

### Database Options

```python
REMDatabase(
    tenant_id: str,           # Required: Tenant identifier
    path: str,                # Required: Database directory
    enable_embeddings: bool = True  # Optional: Enable automatic embeddings
)
```

## Examples

### Full Example: Document Store with Search

```python
import asyncio
import os
from percolate_rocks import REMDatabase

async def main():
    # Setup
    os.environ["P8_DEFAULT_EMBEDDING"] = "text-embedding-3-small"
    os.environ["OPENAI_API_KEY"] = "sk-..."

    db = REMDatabase("docs", "./doc-store", enable_embeddings=True)

    # Schema
    db.register_schema(
        "articles",
        {
            "type": "object",
            "properties": {
                "title": {"type": "string"},
                "author": {"type": "string"},
                "content": {"type": "string"},
                "tags": {"type": "array", "items": {"type": "string"}}
            },
            "required": ["title", "content"]
        },
        indexed_fields=["title", "author"],
        embedding_fields=["content"]
    )

    # Batch insert
    articles = [
        {
            "title": "Introduction to Rust",
            "author": "Alice",
            "content": "Rust is a systems programming language...",
            "tags": ["rust", "programming"]
        },
        {
            "title": "Python for Data Science",
            "author": "Bob",
            "content": "Python has become the lingua franca...",
            "tags": ["python", "data-science"]
        }
    ]

    for article in articles:
        article_id = await db.insert_with_embedding("articles", article)
        print(f"✓ Inserted: {article['title']}")

    # Query
    all_articles = db.scan_by_type("articles")
    print(f"\n📚 Total articles: {len(all_articles)}")

    # Get specific article
    first_article = all_articles[0]
    print(f"\n📄 First article: {first_article['properties']['title']}")
    print(f"   Author: {first_article['properties']['author']}")
    print(f"   Embedding dims: {len(first_article['properties']['embedding'])}")

asyncio.run(main())
```

### Schema Validation

```python
from percolate_rocks import REMDatabase

db = REMDatabase("app", "./db", enable_embeddings=False)

db.register_schema(
    "products",
    {
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "price": {"type": "number", "minimum": 0},
            "in_stock": {"type": "boolean"}
        },
        "required": ["name", "price"]
    }
)

# Valid insert
db.insert("products", {
    "name": "Widget",
    "price": 9.99,
    "in_stock": True
})

# Invalid insert - raises RuntimeError
try:
    db.insert("products", {
        "name": "Gadget",
        "price": -5  # Violates minimum constraint
    })
except RuntimeError as e:
    print(f"Validation error: {e}")
```

## API Reference

### REMDatabase

#### `__init__(tenant_id: str, path: str, enable_embeddings: bool = True)`

Create a new database instance.

**Args:**
- `tenant_id`: Unique identifier for this tenant
- `path`: Directory path for database storage
- `enable_embeddings`: Enable automatic embedding generation

#### `register_schema(name: str, schema: dict, indexed_fields: list = None, embedding_fields: list = None)`

Register a JSON Schema for validation.

**Args:**
- `name`: Schema name (used as table name)
- `schema`: JSON Schema definition (dict)
- `indexed_fields`: List of fields to index
- `embedding_fields`: List of fields to automatically embed

#### `insert(table: str, properties: dict) -> str`

Insert entity without embedding generation (synchronous).

**Returns:** Entity ID (UUID string)

#### `async insert_with_embedding(table: str, properties: dict) -> str`

Insert entity with automatic embedding generation (async).

**Returns:** Entity ID (UUID string)

#### `get(entity_id: str) -> dict | None`

Get entity by ID.

**Returns:** Entity data or None if not found

#### `scan() -> list[dict]`

Get all entities across all tables.

#### `scan_by_type(table: str) -> list[dict]`

Get all entities of a specific type.

#### `delete(entity_id: str)`

Soft delete an entity (adds `deleted_at` timestamp).

#### `list_schemas() -> list[str]`

List all registered schema names.

#### `get_schema(name: str) -> dict`

Get schema definition by name.

#### `has_embeddings() -> bool`

Check if embedding provider is enabled.

## Performance

Benchmarks on MacBook Pro M2:

| Operation | Time | Throughput |
|-----------|------|------------|
| Insert (no embedding) | ~0.5ms | 2,000 ops/sec |
| Insert (with OpenAI) | ~50ms | 20 ops/sec* |
| Insert (local embedding) | ~10ms | 100 ops/sec |
| Get by ID | ~0.2ms | 5,000 ops/sec |
| Scan 1000 entities | ~50ms | 20,000 entities/sec |

*Limited by OpenAI API latency (batch helps)

## Use Cases

- **RAG Applications** - Store documents with embeddings for retrieval
- **Vector Databases** - Semantic search over text data
- **Multi-Tenant SaaS** - Isolated data per customer
- **Edge AI** - Local embeddings for privacy-sensitive applications
- **Data Pipelines** - Fast embedded storage with schema validation

## Migration from Other Tools

### From SQLite

```python
# Before
import sqlite3
conn = sqlite3.connect("db.sqlite")

# After
from percolate_rocks import REMDatabase
db = REMDatabase("tenant", "./db", enable_embeddings=False)
```

### From Pinecone/Weaviate

```python
# Before
import pinecone
index = pinecone.Index("my-index")

# After
from percolate_rocks import REMDatabase
os.environ["P8_DEFAULT_EMBEDDING"] = "text-embedding-3-small"
db = REMDatabase("tenant", "./db", enable_embeddings=True)
```

## Troubleshooting

### "OPENAI_API_KEY environment variable required"

Set your OpenAI API key:
```bash
export OPENAI_API_KEY="sk-..."
```

### "Failed to load model"

Local model download failed. Check internet connection or use OpenAI:
```bash
export P8_DEFAULT_EMBEDDING="text-embedding-3-small"
```

### "Validation error"

Your data doesn't match the schema. Check required fields and types.

## Documentation

- [OpenAI Embeddings Guide](./OPENAI_EMBEDDINGS.md)
- [Python Bindings Documentation](./PYTHON_BINDINGS.md)
- [PyPI Publishing Guide](./PYPI_READY.md)

## Development

### Building from Source

```bash
# Install Rust
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

# Install maturin
pip install maturin

# Build and install
maturin develop --features pyo3,async

# Run tests
python3 examples/basic_usage.py
```

### Running Tests

```bash
# Rust tests
cargo test

# Python tests
python3 python/tests/test_python_bindings.py

# With OpenAI (requires API key)
export OPENAI_API_KEY="sk-..."
python3 .spikes/test-openai-embeddings/test_openai.py
```

## License

MIT

## Contributing

Contributions welcome! Please open an issue or PR.

## Support

- GitHub Issues: [github.com/yourorg/percolate-rocks/issues](https://github.com/yourorg/percolate-rocks/issues)
- Documentation: [github.com/yourorg/percolate-rocks/docs](https://github.com/yourorg/percolate-rocks/docs)
