---
# Argo CD namespace
apiVersion: v1
kind: Namespace
metadata:
  name: argocd
---
# Install Argo CD using the official upstream manifest
# This is a reference to the stable release
# For production, pin to a specific version like v2.13.2
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-install-manifest
  namespace: argocd
data:
  install-url: "https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
---
# Argo CD server service - expose via LoadBalancer or Ingress
apiVersion: v1
kind: Service
metadata:
  name: argocd-server-lb
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/component: server
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: https
    port: 443
    targetPort: 8080
    protocol: TCP
  selector:
    app.kubernetes.io/name: argocd-server
---
# Argo CD ConfigMap for custom configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
data:
  # Enable ApplicationSet controller
  application.instanceLabelKey: app.kubernetes.io/instance

  # Server configuration
  url: https://argocd.percolate.io

  # Repository credentials (if using private repo)
  # For public repos, this section can be omitted
  repositories: |
    - url: https://github.com/percolationlabs/percolate
      type: git
      name: percolate-main

  # Resource customizations for health checks
  resource.customizations: |
    keda.sh/ScaledObject:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Ready" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = "ScaledObject is ready"
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for ScaledObject"
        return hs
---
# Argo CD RBAC ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-rbac-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-rbac-cm
    app.kubernetes.io/part-of: argocd
data:
  # Default policy - read-only for all authenticated users
  policy.default: role:readonly

  # Admin users (modify as needed)
  policy.csv: |
    p, role:org-admin, applications, *, */*, allow
    p, role:org-admin, clusters, get, *, allow
    p, role:org-admin, repositories, get, *, allow
    p, role:org-admin, repositories, create, *, allow
    p, role:org-admin, repositories, update, *, allow
    p, role:org-admin, repositories, delete, *, allow

    g, admin, role:org-admin
---
# Argo CD Notifications ConfigMap (optional)
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-notifications-cm
    app.kubernetes.io/part-of: argocd
data:
  # Example: Slack notifications
  # Uncomment and configure if using notifications
  # service.slack: |
  #   token: $slack-token
  # template.app-deployed: |
  #   message: |
  #     Application {{.app.metadata.name}} is now running new version.
  # trigger.on-deployed: |
  #   - description: Application is synced and healthy
  #     send:
  #     - app-deployed
  #     when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
