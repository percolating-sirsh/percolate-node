# Percolate Configuration
# Copy this to .env and fill in your values

# LLM Provider API Keys
PERCOLATE_ANTHROPIC_API_KEY=your-anthropic-api-key-here
PERCOLATE_OPENAI_API_KEY=your-openai-api-key-here

# Cerebras API Key (get free key at https://cloud.cerebras.ai)
# Ultra-fast inference: qwen-3-32b (2400 tok/s), llama-3.3-70b (1400+ tok/s)
PERCOLATE_CEREBRAS_API_KEY=your-cerebras-api-key-here

# Default LLM Model (used for all agent tasks)
# Options: anthropic:claude-sonnet-4-5-20250929, openai:gpt-4o, cerebras:qwen-3-32b
PERCOLATE_DEFAULT_MODEL=anthropic:claude-sonnet-4-5-20250929

# Query Planning Model Override (optional, fast structured output)
# If set: uses this model for query planning (recommended: Cerebras for speed)
# If not set or commented: falls back to PERCOLATE_DEFAULT_MODEL
#
# Recommended: cerebras:qwen-3-32b (2-3x faster, 125x cheaper than GPT-4)
# Fallback: Comment out to use default_model for everything
PERCOLATE_QUERY_MODEL=cerebras:qwen-3-32b
# PERCOLATE_QUERY_MODEL=  # Uncomment this line to disable (uses default_model)

# API Server
PERCOLATE_API_HOST=0.0.0.0
PERCOLATE_API_PORT=8000

# Project Name (used for OpenInference tracing in Phoenix)
PERCOLATE_PROJECT_NAME=percolate

# OpenTelemetry (disabled by default - enable on K8s cluster)
# When enabled, traces flow: Agent -> OTEL Collector -> Phoenix
OTEL__ENABLED=false

# OTEL Service name (identifies this service in traces)
OTEL__SERVICE_NAME=percolate-api

# Phoenix endpoint for feedback annotations (NOT for traces)
# Use port-forward in dev: kubectl port-forward svc/phoenix 6006:6006
OTEL__PHOENIX_COLLECTOR_ENDPOINT=http://localhost:6006

# Phoenix Cloud API key (optional, for cloud Phoenix instances)
# OTEL__PHOENIX_API_KEY=your-phoenix-api-key-here

# OTEL Collector endpoint (standard OTEL env var)
# Production (K8s): http://otel-collector.default.svc.cluster.local:4317
# Local testing: kubectl port-forward svc/otel-collector 4317:4317
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

# Database
PERCOLATE_DB_PATH=./data/percolate.db
PERCOLATE_REDIS_URL=redis://localhost:6379

# Authentication (nested with AUTH__ prefix)
AUTH__ENABLED=false
AUTH__PROVIDER=p8fs

# JWT Keypair (ES256 with ECDSA P-256)
# CHANGE IN PRODUCTION - Generate new keypair with:
# python3 -c "from cryptography.hazmat.primitives.asymmetric import ec; from cryptography.hazmat.primitives import serialization; key = ec.generate_private_key(ec.SECP256R1()); print(key.private_bytes(encoding=serialization.Encoding.PEM, format=serialization.PrivateFormat.PKCS8, encryption_algorithm=serialization.NoEncryption()).decode()); print(key.public_key().public_bytes(encoding=serialization.Encoding.PEM, format=serialization.PublicFormat.SubjectPublicKeyInfo).decode())"
AUTH__JWT_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgT428/clvyeL1dpKv
WnR6jzjomtZaUs7kLBbx9q0KmzOhRANCAARucrqJRUuDGUMaqzzaMeCcljmGJlfo
Roy5U3K87lqKSGmOjPbdj0x7NjX3FIG8yCiIZtBfWMeHLpBzX1XpO+fW
-----END PRIVATE KEY-----"
AUTH__JWT_PUBLIC_KEY="-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbnK6iUVLgxlDGqs82jHgnJY5hiZX
6EaMuVNyvO5aikhpjoz23Y9MezY19xSBvMgoiGbQX1jHhy6Qc19V6Tvn1g==
-----END PUBLIC KEY-----"
AUTH__JWT_ALGORITHM=ES256
AUTH__ACCESS_TOKEN_EXPIRE_MINUTES=60
AUTH__REFRESH_TOKEN_EXPIRE_DAYS=30

# OIDC External Provider (Microsoft, Google, GitHub)
# Only used when AUTH__PROVIDER=oidc
AUTH__OIDC_ISSUER_URL=
AUTH__OIDC_AUDIENCE=api
AUTH__OIDC_CLIENT_ID=
AUTH__OIDC_CLIENT_SECRET=
AUTH__OIDC_JWKS_CACHE_TTL=3600
